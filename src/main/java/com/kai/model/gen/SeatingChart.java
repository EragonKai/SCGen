package com.kai.model.gen;

import com.kai.model.Seat;
import com.kai.model.Student;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

/**
 * A seating chart class that represents one layout of students in a classroom.
 * This class is generated by SChartGenerator and is shown to the client.
 *
 * @see SChartGenerator
 */
public class SeatingChart {

    /**
     * The arrangement/layout of the classroom.
     */
    private Arrangement arrangement;
    /**
     * The  individual seats in the classroom with set id and (potentially) students.
     */
    private List<Seat> seats;

    /**
     * Creates a empty seating chart that will display the arrangement with no students occupying anything.
     * It is possible to modify the chart afterwards in order to set students to set locations.
     *
     * @param arrangement The arrangement of the classroom.
     * @param totalSeats The total number of seats.
     */
    public SeatingChart(Arrangement arrangement, int totalSeats) {
        this(arrangement, null);
        seats = arrangement.getSeats(totalSeats);
    }

    /**
     * Creates a seating chart with students that have been pre set in an array.
     *
     * @param arrangement The arrangement of the classroom.
     * @param seats All seats in the classroom along which may contain students.
     */
    public SeatingChart(Arrangement arrangement, List<Seat> seats) {
        this.arrangement = arrangement;
        this.seats = seats;
    }

    /**
     * Retrieves a seat based upon a given string ID.
     *
     * @param id The ID of the desired seat.
     * @return The seat with an ID equal to the passed in one.
     */
    public Seat getSeat(String id) {
        for (Seat s: seats) if (s.getSeatId().equals(id)) return s;
        return null;
    }

    /**
     * Gets a copy of all the seats in the seating chart.
     *
     * @return The list of seats.
     */
    public List<Seat> getSeatList() {
        return new ArrayList<>(seats);
    }

    /**
     * Forms an image of the classroom based on the arrangement.
     * Displays the seat IDs and any currently occupying students.
     *
     * @return An image of the classroom that is intended to be shown to the user.
     */
    public BufferedImage getSeatingChartImage() {
        return null;
    }

    @Override
    public String toString() {
        String s = "SeatingChart{" +
                "arrangement=" + arrangement +
                ", seats=";
        for (Seat seat: seats) s += ("\n\t" + seat);
        return s;
    }
}
